import Head from 'next/head';
import Image from 'next/image';
import Link from 'next/link';
import { XCircle, Search, Moon, Sun } from 'react-feather';
import { useTheme } from 'next-themes';
import { ChangeEvent, useRef, useEffect, useCallback } from 'react';
import { useStoreActions, useStoreState } from '@/hooks/useStore';

//TODO: pisah

const ToggleModeButton = () => {
  const { systemTheme, theme, setTheme } = useTheme();
  const currentTheme = theme === 'system' ? systemTheme : theme;
  const toggleMode = () => {
    theme == 'dark' ? setTheme('light') : setTheme('dark');
  };
  return (
    <button
      title="toggle theme mode"
      onClick={toggleMode}
      className=" text-yellow-500"
    >
      <Moon className="dark:hidden" />
      <Sun className="hidden dark:block" />
    </button>
  );
};

const SearchBar = () => {
  const setSearchQuery = useStoreActions(actions => actions.setSearchQuery);
  const searchQuery = useStoreState(state => state.searchQuery);
  const resetInput = () => {
    setSearchQuery('');
  };
  const handleInputChange = (e: ChangeEvent<HTMLInputElement>) => {
    setSearchQuery(e.target.value);
  };
  const inputRef = useRef<HTMLInputElement>(null);
  return (
    <div className="relative w-full min-w-0 max-w-7xl mx-auto">
      <form
        className="flex flex-col justify-center"
        onSubmit={e => {
          e.preventDefault();
        }}
        title="search"
      >
        <input
          id="search-bar"
          className="bg-transparent w-full py-2 pl-8 pr-7 outline outline-1 outline-gray-300 rounded-lg focus-within:outline-none hover:bg-gray-100 focus:bg-gray-100 
      dark:text-white dark:focus-within:text-black dark:hover:text-black transition-colors"
          type="text"
          placeholder="Search articles..."
          ref={inputRef}
          onChange={handleInputChange}
          onKeyUp={e => {
            if (e.key === 'Escape') {
              resetInput();
              e.currentTarget.value = '';
              inputRef.current?.blur();
            }
          }}
        />
        <input className="hidden" type="reset" value="" id="reset-button" />
        <Search
          size={18}
          className="absolute z-10 left-0 top-0 bottom-0 my-auto ml-2 text-gray-500"
          xlinkTitle="search icon"
        />
        <label
          htmlFor="reset-button"
          title="clear search"
          className={`${searchQuery ? '' : 'hidden'}`}
        >
          <XCircle
            size={18}
            className="absolute z-10 right-0 top-0 bottom-0 my-auto mr-2 text-gray-500 cursor-pointer"
            onClick={resetInput}
          />
        </label>
      </form>
    </div>
  );
};

const Header = () => {
  return (
    <header className="py-8 px-4 flex justify-center relative">
      <Link
        href={'https://www.nytimes.com'}
        target="_blank"
        rel="noopener noreferrer"
      >
        <Image
          src="/nyt-icon.png"
          alt="new york times logo"
          title="new york times logo"
          className="max-h-40 w-auto dark:invert"
          width={500}
          height={500}
          priority
        />
      </Link>
      <div className="hidden md:block absolute top-0 right-0 p-8">
        <ToggleModeButton />
      </div>
      <div className="fixed z-50 md:hidden bottom-10 right-10 bg-black dark:bg-white flex p-2 rounded-md">
        <ToggleModeButton />
      </div>
    </header>
  );
};

const ArticleCard = () => {
  return <div className="bg-zinc-200 dark:bg-zinc-900 h-[100px] w-auto"></div>;
};

const ArticleGrid = () => {
  return (
    <div className="grid gap-4 grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4">
      {Array(50)
        .fill(0)
        .map((fill, index) => {
          return <ArticleCard key={index} />;
        })}
    </div>
  );
};

const Home = () => {
  const toggleSearchOverlay = useCallback((e: KeyboardEvent) => {
    if ((e.ctrlKey || e.metaKey) && e.key === 'k') {
      e.preventDefault();
      window.scrollTo({ top: 0 });
      const targetElement = document.getElementById('search-bar');
      if (targetElement) {
        targetElement.focus();
      }
    }
  }, []);

  useEffect(() => {
    window.addEventListener('keydown', toggleSearchOverlay);

    return () => {
      window.removeEventListener('keydown', toggleSearchOverlay);
    };
  }, [toggleSearchOverlay]);
  return (
    <>
      <Head>
        <title>NyTimes Search</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="text-black dark:text-white ">
        <Header />
        <section className="container mx-auto p-4 flex flex-col space-y-8">
          <SearchBar />
          <ArticleGrid />
        </section>
      </main>
    </>
  );
};

export default Home;

