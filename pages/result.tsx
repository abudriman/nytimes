import { ResultHeader } from '@/components/partials';
import { useArticles } from '@/hooks/useArticles';
import { GetServerSideProps, InferGetServerSidePropsType } from 'next';
import Head from 'next/head';
import { IArticle } from '@/interface';
import Image from 'next/image';
import Link from 'next/link';

const ArticleCard = ({ article }: { article: IArticle }) => {
  return (
    <Link
      href={article.web_url}
      target="_blank"
      rel="noopener noreferrer"
      className="bg-zinc-200 dark:bg-zinc-900 min-h-[100px] w-auto overflow-hidden rounded-md"
    >
      <div className="flex flex-row lg:flex-col">
        <div className=" overflow-hidden ">
          {article.multimedia.length ? (
            <Image
              height={144}
              width={500}
              style={{
                objectFit: 'cover',
                objectPosition: 'center',
                width: '100%',
              }}
              className="h-28 w-28 max-w-[7rem] min-w-[7rem] lg:w-full lg:max-w-full lg:min-w-full   overflow-hidden"
              src={'https://www.nytimes.com/' + article.multimedia[0].url}
              alt={article.multimedia[0].caption}
            ></Image>
          ) : (
            <Image
              height={144}
              width={500}
              style={{
                objectFit: 'cover',
                objectPosition: 'center',
                width: '100%',
              }}
              className="h-28 w-28 max-w-[7rem] min-w-[7rem] lg:w-full lg:max-w-full lg:min-w-full  overflow-hidden"
              src="/news-placeholder.jpg"
              alt="new york times articles"
            ></Image>
          )}
        </div>
        <div className="flex-1 flex-col">
          <h6>{article.headline.main}</h6>
          <p></p>
        </div>
      </div>
    </Link>
  );
};

const ArticleCardSkeleton = () => {
  return (
    <div className="bg-zinc-200 dark:bg-zinc-900 h-[100px] w-auto animate-pulse"></div>
  );
};

const ArticleGrid = () => {
  const { articles, size, setSize, isLoading, isError } = useArticles();
  if (isError) {
    <div className="flex">
      <p>Error occured</p>
    </div>;
  }
  if (isLoading) {
    return (
      <div className="px-4 md:px-0 grid gap-4 grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4">
        {Array(50)
          .fill(0)
          .map((fill, index) => {
            return <ArticleCardSkeleton key={index} />;
          })}
      </div>
    );
  }
  if (!articles) {
    return (
      <div className="flex">
        <p>Error occured</p>
      </div>
    );
  }
  return (
    <div className="px-4 md:px-0 grid gap-4 grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4">
      {articles.map((response, pageIndex) => {
        return response.response?.docs?.map((article, index) => {
          return <ArticleCard key={index} article={article} />;
        });
      })}
    </div>
  );
};

export const getServerSideProps: GetServerSideProps<{
  search: string;
}> = async ({ query }) => {
  return {
    props: {
      search: (query.search as string) ?? '',
    },
  };
};

const Result = ({
  search,
}: InferGetServerSidePropsType<typeof getServerSideProps>) => {
  return (
    <>
      <Head>
        <title>{search} | NyTimes Article Search</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <ResultHeader />
      <main className="container mx-auto space-y-4">
        <ArticleGrid />
      </main>
    </>
  );
};

export default Result;
